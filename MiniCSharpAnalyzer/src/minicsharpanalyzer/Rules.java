/* The following code was generated by JFlex 1.4.3 on 8/25/18 10:46 PM */


package minicsharpanalyzer;
import static minicsharpanalyzer.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/25/18 10:46 PM from the specification file
 * <tt>src/minicsharpanalyzer/Rules.flex</tt>
 */
class Rules {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\27\1\30\2\0\1\6\22\0\1\63\1\10\3\0\1\53"+
    "\1\56\1\0\1\60\1\61\1\5\1\52\1\53\1\52\1\57\1\4"+
    "\1\66\11\2\1\0\1\53\1\54\1\55\1\54\2\0\1\50\2\64"+
    "\1\67\1\62\1\64\5\1\1\13\1\1\1\47\5\1\1\17\3\1"+
    "\1\65\2\1\1\11\1\0\1\26\1\0\1\1\1\0\1\22\1\34"+
    "\1\40\1\32\1\16\1\41\1\37\1\42\1\14\1\1\1\46\1\35"+
    "\1\21\1\15\1\24\1\44\1\1\1\20\1\36\1\23\1\33\1\31"+
    "\1\45\1\43\1\51\1\1\1\12\1\3\1\25\1\7\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\2\4\1\1\3\4\1\5"+
    "\3\2\1\5\1\3\3\2\2\5\5\2\1\1\1\4"+
    "\1\2\1\0\1\5\1\6\1\5\3\0\2\2\1\7"+
    "\12\2\1\5\3\2\1\5\2\2\2\5\1\0\1\10"+
    "\1\5\1\0\1\11\1\5\1\0\1\7\2\2\3\5"+
    "\1\2\2\5\5\2\1\5\1\7\1\0\1\10\2\0"+
    "\1\5\1\0\4\2\1\12\2\2\2\5\2\2\1\6"+
    "\1\0\1\11\1\5\1\0\6\2\1\5\4\2\1\0"+
    "\3\2\1\0\1\2\4\0\1\5\2\0\1\5\4\0"+
    "\1\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\70\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\160\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\70\0\70"+
    "\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\160"+
    "\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930"+
    "\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u04d0\0\u0ab8"+
    "\0\u0af0\0\u0b28\0\u05e8\0\u0b60\0\70\0\u0690\0\u0b98\0\u0bd0"+
    "\0\u06c8\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58"+
    "\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18"+
    "\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u0bd0\0\u1030\0\u0bd0\0\u1068"+
    "\0\u10a0\0\u10d8\0\u1110\0\u1148\0\160\0\u0f50\0\u1180\0\u11b8"+
    "\0\u0d90\0\u0ce8\0\u11f0\0\70\0\u0ff8\0\70\0\u0ff8\0\u1228"+
    "\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8"+
    "\0\u1420\0\u0dc8\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570"+
    "\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730"+
    "\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\3\1\14\1\15\1\16\1\3"+
    "\1\17\2\3\1\20\1\3\2\7\2\21\1\22\1\23"+
    "\1\3\1\24\1\3\1\25\1\26\1\27\1\30\1\3"+
    "\1\31\1\3\1\32\1\3\1\33\2\3\2\7\2\11"+
    "\1\34\1\7\1\35\1\7\1\3\1\21\1\3\1\31"+
    "\1\36\1\26\14\37\1\40\6\37\1\40\12\37\2\40"+
    "\27\37\1\40\1\37\2\3\10\37\1\3\1\26\6\3"+
    "\1\26\1\3\4\37\5\3\2\26\12\3\10\37\1\3"+
    "\1\37\3\3\1\26\1\37\1\3\1\4\10\37\1\3"+
    "\1\26\6\3\1\26\1\3\4\37\5\3\2\26\12\3"+
    "\5\37\1\41\2\37\1\3\1\37\2\3\1\4\1\26"+
    "\2\37\1\42\1\21\10\37\1\40\1\37\1\42\3\37"+
    "\1\42\1\40\3\37\2\21\1\37\1\42\1\37\1\42"+
    "\1\37\2\40\2\42\6\37\1\42\11\37\1\42\1\21"+
    "\1\42\1\37\2\42\4\37\1\43\1\44\6\37\1\40"+
    "\6\37\1\40\12\37\2\40\27\37\1\40\10\37\1\45"+
    "\3\37\1\40\6\37\1\40\12\37\2\40\27\37\1\40"+
    "\14\37\1\40\6\37\1\40\12\37\2\40\15\37\1\7"+
    "\11\37\1\40\14\37\1\40\6\37\1\40\2\37\1\7"+
    "\7\37\2\40\27\37\1\40\14\37\1\40\6\37\1\40"+
    "\1\37\1\7\10\37\2\40\27\37\1\40\1\37\2\3"+
    "\10\37\1\3\1\26\1\46\3\3\1\47\1\3\1\26"+
    "\1\3\4\37\5\3\2\26\1\3\1\50\10\3\10\37"+
    "\1\3\1\37\3\3\1\26\1\37\2\3\10\37\1\3"+
    "\1\26\6\3\1\26\1\3\4\37\2\3\1\51\2\3"+
    "\2\26\12\3\10\37\1\3\1\37\3\3\1\26\1\37"+
    "\2\3\10\37\1\3\1\26\6\3\1\26\1\3\4\37"+
    "\4\3\1\52\2\26\3\3\1\53\6\3\10\37\1\3"+
    "\1\37\3\3\1\26\1\37\2\3\10\37\1\3\1\26"+
    "\1\3\1\54\4\3\1\26\1\3\4\37\5\3\2\26"+
    "\12\3\10\37\1\3\1\37\3\3\1\26\1\37\2\3"+
    "\10\37\1\3\1\26\3\3\1\55\2\3\1\26\1\3"+
    "\4\37\5\3\2\26\2\3\1\56\7\3\10\37\1\3"+
    "\1\37\3\3\1\26\3\37\1\21\10\37\1\40\6\37"+
    "\1\40\3\37\2\21\5\37\2\40\23\37\1\21\3\37"+
    "\1\40\1\37\2\3\10\37\1\3\1\26\6\3\1\26"+
    "\1\57\4\37\5\3\2\26\12\3\10\37\1\3\1\37"+
    "\3\3\1\26\1\37\2\3\10\37\1\3\1\26\6\3"+
    "\1\26\1\60\4\37\5\3\2\26\12\3\10\37\1\3"+
    "\1\37\3\3\1\26\1\37\2\3\10\37\1\3\1\26"+
    "\3\3\1\61\2\3\1\26\1\62\4\37\5\3\2\26"+
    "\12\3\10\37\1\3\1\37\3\3\1\26\1\37\2\3"+
    "\10\37\1\3\1\26\6\3\1\63\1\3\4\37\5\3"+
    "\2\26\12\3\10\37\1\3\1\37\3\3\1\26\1\37"+
    "\2\3\10\37\1\3\1\26\6\3\1\26\1\3\4\37"+
    "\4\3\1\64\2\26\12\3\10\37\1\3\1\37\3\3"+
    "\1\26\1\37\2\3\10\37\1\3\1\26\5\3\1\65"+
    "\1\26\1\66\4\37\5\3\2\26\12\3\10\37\1\3"+
    "\1\37\3\3\1\26\1\37\1\3\1\67\10\37\1\3"+
    "\1\26\1\3\1\67\3\3\1\67\1\26\1\3\4\37"+
    "\1\3\1\67\1\3\1\67\1\3\2\26\2\67\6\3"+
    "\1\67\1\3\10\37\1\67\1\37\1\67\1\3\2\67"+
    "\1\37\2\3\10\37\1\3\1\26\6\3\1\26\1\3"+
    "\4\37\5\3\2\26\2\3\1\70\7\3\10\37\1\3"+
    "\1\37\3\3\1\26\1\37\2\3\10\37\1\3\1\26"+
    "\1\3\1\71\4\3\1\26\1\3\4\37\5\3\2\26"+
    "\12\3\10\37\1\3\1\37\3\3\1\26\14\37\1\40"+
    "\6\37\1\40\12\37\2\40\16\37\1\7\10\37\1\40"+
    "\14\37\1\40\6\37\1\40\12\37\2\40\21\37\1\7"+
    "\5\37\1\40\1\37\1\3\1\72\10\37\3\3\1\67"+
    "\3\3\1\67\2\3\4\37\1\3\1\67\1\3\1\67"+
    "\3\3\2\67\6\3\1\67\1\3\5\37\1\41\2\37"+
    "\1\67\1\37\1\67\1\3\1\73\1\67\2\37\1\41"+
    "\1\74\10\37\1\40\1\37\1\74\4\37\1\40\12\37"+
    "\2\40\22\37\1\74\3\37\1\41\1\40\2\37\1\42"+
    "\11\37\1\40\1\37\1\42\3\37\1\42\1\40\6\37"+
    "\1\42\1\37\1\42\1\37\2\40\2\42\6\37\1\42"+
    "\11\37\1\42\1\37\1\42\1\37\2\42\3\43\1\75"+
    "\2\43\1\75\5\43\1\76\6\43\1\76\4\43\1\75"+
    "\5\43\2\76\27\43\1\76\5\44\1\77\1\100\5\44"+
    "\1\101\6\44\1\101\4\44\1\100\5\44\2\101\27\44"+
    "\1\101\11\37\1\102\2\37\1\40\6\37\1\40\12\37"+
    "\2\40\27\37\1\40\1\37\2\3\10\37\1\3\1\26"+
    "\6\3\1\103\1\3\4\37\5\3\2\26\12\3\10\37"+
    "\1\3\1\37\3\3\1\26\1\37\2\3\10\37\1\3"+
    "\1\26\6\3\1\26\1\3\4\37\5\3\2\26\4\3"+
    "\1\104\5\3\10\37\1\3\1\37\3\3\1\26\1\37"+
    "\2\3\10\37\1\3\1\26\6\3\1\26\1\3\4\37"+
    "\4\3\1\105\2\26\12\3\10\37\1\3\1\37\3\3"+
    "\1\26\1\37\2\3\10\37\1\3\1\26\6\3\1\26"+
    "\1\3\4\37\5\3\1\106\1\26\12\3\10\37\1\3"+
    "\1\37\3\3\1\26\1\37\2\3\10\37\1\3\1\26"+
    "\6\3\1\107\1\3\4\37\5\3\2\26\12\3\10\37"+
    "\1\3\1\37\3\3\1\26\1\37\2\3\10\37\1\3"+
    "\1\26\6\3\1\110\1\3\4\37\5\3\2\26\12\3"+
    "\10\37\1\3\1\37\3\3\1\26\1\37\2\3\10\37"+
    "\1\3\1\26\6\3\1\26\1\3\4\37\2\3\1\111"+
    "\2\3\2\26\12\3\10\37\1\3\1\37\3\3\1\26"+
    "\1\37\2\3\10\37\1\3\1\112\6\3\1\26\1\3"+
    "\4\37\5\3\2\26\12\3\10\37\1\3\1\37\3\3"+
    "\1\26\1\37\2\3\10\37\1\3\1\113\6\3\1\26"+
    "\1\3\4\37\5\3\2\26\12\3\10\37\1\3\1\37"+
    "\3\3\1\26\1\37\2\3\10\37\1\3\1\26\6\3"+
    "\1\26\1\3\4\37\2\3\1\114\2\3\2\26\12\3"+
    "\10\37\1\3\1\37\3\3\1\26\1\37\2\3\10\37"+
    "\1\3\1\26\1\3\1\115\4\3\1\26\1\3\4\37"+
    "\5\3\2\26\12\3\10\37\1\3\1\37\3\3\1\26"+
    "\1\37\2\3\10\37\1\3\1\26\6\3\1\26\1\105"+
    "\4\37\5\3\2\26\12\3\10\37\1\3\1\37\3\3"+
    "\1\26\1\37\2\3\10\37\1\3\1\26\3\3\1\116"+
    "\2\3\1\26\1\3\4\37\5\3\2\26\12\3\10\37"+
    "\1\3\1\37\3\3\1\26\1\37\2\3\10\37\1\3"+
    "\1\26\5\3\1\117\1\26\1\3\4\37\5\3\2\26"+
    "\12\3\10\37\1\3\1\37\3\3\1\26\1\37\2\3"+
    "\10\37\1\3\1\26\6\3\1\26\1\3\4\37\4\3"+
    "\1\120\2\26\12\3\10\37\1\3\1\37\3\3\1\26"+
    "\1\37\2\3\10\37\1\3\1\26\3\3\1\50\2\3"+
    "\1\26\1\3\4\37\5\3\2\26\12\3\10\37\1\3"+
    "\1\37\3\3\1\26\1\37\2\3\10\37\1\3\1\121"+
    "\6\3\1\26\1\3\4\37\5\3\2\26\12\3\10\37"+
    "\1\3\1\37\3\3\1\26\1\37\2\3\10\37\1\3"+
    "\1\26\6\3\1\26\1\3\4\37\5\3\2\26\5\3"+
    "\1\122\4\3\10\37\1\3\1\37\3\3\1\26\1\37"+
    "\1\3\1\72\10\37\1\3\1\26\1\3\1\67\3\3"+
    "\1\67\1\26\1\3\4\37\1\3\1\67\1\3\1\67"+
    "\1\3\2\26\2\67\6\3\1\67\1\3\5\37\1\41"+
    "\2\37\1\67\1\37\1\67\1\3\1\72\1\67\3\37"+
    "\1\123\10\37\1\40\6\37\1\40\12\37\2\40\12\37"+
    "\1\123\10\37\1\123\3\37\1\40\4\44\1\124\1\77"+
    "\1\100\5\44\1\101\6\44\1\101\4\44\1\100\5\44"+
    "\2\101\27\44\1\101\5\125\1\126\6\125\1\127\6\125"+
    "\1\127\12\125\2\127\27\125\1\127\12\37\1\130\1\37"+
    "\1\40\6\37\1\40\12\37\2\40\27\37\1\40\1\37"+
    "\2\3\10\37\1\3\1\26\1\3\1\131\4\3\1\26"+
    "\1\3\4\37\5\3\2\26\12\3\10\37\1\3\1\37"+
    "\3\3\1\26\1\37\2\3\10\37\1\3\1\26\6\3"+
    "\1\26\1\3\4\37\4\3\1\132\2\26\12\3\10\37"+
    "\1\3\1\37\3\3\1\26\1\37\2\3\10\37\1\3"+
    "\1\26\6\3\1\26\1\3\4\37\4\3\1\50\2\26"+
    "\12\3\10\37\1\3\1\37\3\3\1\26\1\37\2\3"+
    "\10\37\1\3\1\26\1\3\1\50\4\3\1\26\1\3"+
    "\4\37\5\3\2\26\12\3\10\37\1\3\1\37\3\3"+
    "\1\26\1\37\2\3\10\37\1\3\1\26\1\3\1\133"+
    "\4\3\1\26\1\3\4\37\5\3\2\26\12\3\10\37"+
    "\1\3\1\37\3\3\1\26\1\37\2\3\10\37\1\3"+
    "\1\26\6\3\1\26\1\3\4\37\2\3\1\134\2\3"+
    "\2\26\12\3\10\37\1\3\1\37\3\3\1\26\1\37"+
    "\2\3\10\37\1\3\1\26\1\3\1\135\4\3\1\26"+
    "\1\3\4\37\5\3\2\26\12\3\10\37\1\3\1\37"+
    "\3\3\1\26\1\37\2\3\10\37\1\3\1\26\6\3"+
    "\1\26\1\3\4\37\5\3\1\50\1\26\12\3\10\37"+
    "\1\3\1\37\3\3\1\26\1\37\2\3\10\37\1\3"+
    "\1\26\6\3\1\26\1\3\4\37\1\3\1\50\3\3"+
    "\2\26\12\3\10\37\1\3\1\37\3\3\1\26\1\37"+
    "\2\3\10\37\1\3\1\26\6\3\1\26\1\3\4\37"+
    "\3\3\1\136\1\3\2\26\12\3\10\37\1\3\1\37"+
    "\3\3\1\26\1\37\2\3\10\37\1\3\1\26\5\3"+
    "\1\137\1\26\1\3\4\37\5\3\2\26\12\3\10\37"+
    "\1\3\1\37\3\3\1\26\1\37\2\3\10\37\1\3"+
    "\1\140\6\3\1\26\1\3\4\37\5\3\2\26\12\3"+
    "\10\37\1\3\1\37\3\3\1\26\1\37\2\3\10\37"+
    "\1\3\1\26\6\3\1\26\1\3\4\37\5\3\1\112"+
    "\1\26\12\3\10\37\1\3\1\37\3\3\1\26\1\37"+
    "\2\3\10\37\1\3\1\26\6\3\1\26\1\3\4\37"+
    "\5\3\1\141\1\26\12\3\10\37\1\3\1\37\3\3"+
    "\1\26\1\37\2\3\10\37\1\3\1\26\6\3\1\26"+
    "\1\3\4\37\4\3\1\142\2\26\12\3\10\37\1\3"+
    "\1\37\3\3\1\26\1\37\2\3\10\37\1\3\1\26"+
    "\6\3\1\26\1\3\4\37\5\3\2\26\10\3\1\143"+
    "\1\3\10\37\1\3\1\37\3\3\1\26\2\37\1\144"+
    "\11\37\1\40\6\37\1\40\12\37\2\40\26\37\1\144"+
    "\1\40\6\145\1\146\5\145\1\147\6\145\1\147\4\145"+
    "\1\146\5\145\2\147\27\145\1\147\4\125\1\75\1\126"+
    "\6\125\1\127\6\125\1\127\12\125\2\127\27\125\1\127"+
    "\13\37\1\150\1\40\6\37\1\40\12\37\2\40\27\37"+
    "\1\40\1\37\2\3\10\37\1\3\1\26\3\3\1\151"+
    "\2\3\1\26\1\3\4\37\5\3\2\26\12\3\10\37"+
    "\1\3\1\37\3\3\1\26\1\37\2\3\10\37\1\3"+
    "\1\26\1\3\1\152\4\3\1\26\1\3\4\37\5\3"+
    "\2\26\12\3\10\37\1\3\1\37\3\3\1\26\1\37"+
    "\2\3\10\37\1\3\1\26\1\153\5\3\1\26\1\3"+
    "\4\37\5\3\2\26\12\3\10\37\1\3\1\37\3\3"+
    "\1\26\1\37\2\3\10\37\1\3\1\26\3\3\1\154"+
    "\2\3\1\26\1\3\4\37\5\3\2\26\12\3\10\37"+
    "\1\3\1\37\3\3\1\26\1\37\2\3\10\37\1\3"+
    "\1\26\6\3\1\26\1\3\4\37\5\3\2\26\6\3"+
    "\1\50\3\3\10\37\1\3\1\37\3\3\1\26\1\37"+
    "\2\3\10\37\1\3\1\26\1\155\5\3\1\26\1\3"+
    "\4\37\5\3\2\26\12\3\10\37\1\3\1\37\3\3"+
    "\1\26\1\37\2\3\10\37\1\3\1\26\3\3\1\156"+
    "\2\3\1\26\1\3\4\37\5\3\2\26\12\3\10\37"+
    "\1\3\1\37\3\3\1\26\14\37\1\157\6\37\1\40"+
    "\12\37\2\40\27\37\1\40\1\37\2\3\10\37\1\3"+
    "\1\26\6\3\1\26\1\3\4\37\5\3\2\26\1\3"+
    "\1\160\10\3\10\37\1\3\1\37\3\3\1\26\1\37"+
    "\2\3\10\37\1\3\1\26\4\3\1\161\1\3\1\26"+
    "\1\3\4\37\5\3\2\26\12\3\10\37\1\3\1\37"+
    "\3\3\1\26\1\37\2\3\10\37\1\3\1\26\6\3"+
    "\1\26\1\3\4\37\1\3\1\162\3\3\2\26\12\3"+
    "\10\37\1\3\1\37\3\3\1\26\1\37\2\3\10\37"+
    "\1\3\1\26\1\50\5\3\1\26\1\3\4\37\5\3"+
    "\2\26\12\3\10\37\1\3\1\37\3\3\1\26\1\37"+
    "\2\3\10\37\1\3\1\26\6\3\1\26\1\3\4\37"+
    "\5\3\1\26\1\50\12\3\10\37\1\3\1\37\3\3"+
    "\1\26\1\37\2\3\10\37\1\3\1\26\3\3\1\163"+
    "\2\3\1\26\1\3\4\37\5\3\2\26\12\3\10\37"+
    "\1\3\1\37\3\3\1\26\14\37\1\40\1\164\5\37"+
    "\1\40\12\37\2\40\27\37\1\40\1\37\2\3\10\37"+
    "\1\3\1\26\5\3\1\165\1\26\1\3\4\37\5\3"+
    "\2\26\12\3\10\37\1\3\1\37\3\3\1\26\1\37"+
    "\2\3\10\37\1\3\1\26\1\3\1\166\4\3\1\26"+
    "\1\3\4\37\5\3\2\26\12\3\10\37\1\3\1\37"+
    "\3\3\1\26\1\37\2\3\10\37\1\3\1\26\5\3"+
    "\1\167\1\26\1\3\4\37\5\3\2\26\12\3\10\37"+
    "\1\3\1\37\3\3\1\26\14\37\1\40\1\37\1\170"+
    "\4\37\1\40\12\37\2\40\27\37\1\40\1\37\2\3"+
    "\10\37\1\3\1\26\6\3\1\26\1\3\4\37\5\3"+
    "\2\26\1\142\11\3\10\37\1\3\1\37\3\3\1\26"+
    "\1\37\2\3\10\37\1\3\1\26\1\171\5\3\1\26"+
    "\1\3\4\37\5\3\2\26\12\3\10\37\1\3\1\37"+
    "\3\3\1\26\1\37\2\3\10\37\1\3\1\26\6\3"+
    "\1\26\1\3\4\37\5\3\2\26\11\3\1\50\10\37"+
    "\1\3\1\37\3\3\1\26\14\37\1\40\2\37\1\172"+
    "\3\37\1\40\12\37\2\40\27\37\1\40\1\37\2\3"+
    "\10\37\1\3\1\26\6\3\1\112\1\3\4\37\5\3"+
    "\2\26\12\3\10\37\1\3\1\37\3\3\1\26\14\37"+
    "\1\40\1\37\1\173\4\37\1\40\12\37\2\40\27\37"+
    "\1\40\14\37\1\40\3\37\1\174\2\37\1\40\12\37"+
    "\2\40\27\37\1\40\14\37\1\40\4\37\1\175\1\37"+
    "\1\40\12\37\2\40\27\37\1\40\14\37\1\176\6\37"+
    "\1\40\12\37\2\40\27\37\1\40\14\37\1\40\1\177"+
    "\5\37\1\40\12\37\2\40\27\37\1\40\14\37\1\40"+
    "\5\37\1\200\1\40\12\37\2\40\27\37\1\40\14\37"+
    "\1\40\6\37\1\201\12\37\2\40\27\37\1\40\14\37"+
    "\1\40\6\37\1\40\1\202\11\37\2\40\27\37\1\40"+
    "\14\37\1\40\3\37\1\203\2\37\1\40\12\37\2\40"+
    "\27\37\1\40\14\37\1\40\6\37\1\40\1\37\1\204"+
    "\10\37\2\40\27\37\1\40\14\37\1\40\6\37\1\40"+
    "\2\37\1\205\7\37\2\40\27\37\1\40\7\37\1\206"+
    "\4\37\1\40\6\37\1\40\12\37\2\40\27\37\1\40";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6272];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\35\1\1\0\3\1\3\0\26\1\1\0\2\1"+
    "\1\0\2\1\1\0\20\1\1\0\1\1\2\0\1\1"+
    "\1\0\14\1\1\0\2\1\1\0\13\1\1\0\3\1"+
    "\1\0\1\1\4\0\1\1\2\0\1\1\4\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme = "";
    public int column = 0;
    public int line = 0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Rules(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Rules(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { lexeme = yytext();
               column = yycolumn;
               line = yyline;
               if(lexeme.length()>31){
                  return ErrorIdentifier;   
               }else{
                  return Identifier;
               }
          }
        case 12: break;
        case 6: 
          { lexeme = yytext();
                        column = yycolumn;
                        line = yyline;
                        return DoubleConstant;
          }
        case 13: break;
        case 8: 
          { lexeme = yytext();
                                           column = yycolumn;
                                           line = yyline;
                                           return Comments;
          }
        case 14: break;
        case 11: 
          { lexeme = yytext();
            column = yycolumn;
            line = yyline;
            return  StringConstant;
          }
        case 15: break;
        case 9: 
          { lexeme = yytext();
                  column = yycolumn;
                  line = yyline;
                  return ErrorComment;
          }
        case 16: break;
        case 1: 
          { lexeme = yytext();
   column = yycolumn;
   line = yyline;
   return Error;
          }
        case 17: break;
        case 7: 
          { lexeme = yytext();
                  column = yycolumn;
                  line = yyline;
                  return ReservedWord;
          }
        case 18: break;
        case 4: 
          { lexeme = yytext();
                           column = yycolumn;
                           line = yyline;
                           return OperatorsAndPunctuation;
          }
        case 19: break;
        case 5: 
          { lexeme = yytext();
                           column = yycolumn;
                           line = yyline;
                           return IntegerConstant;
          }
        case 20: break;
        case 3: 
          { /*Ignore*/
          }
        case 21: break;
        case 10: 
          { lexeme = yytext();
         column = yycolumn;
         line = yyline;
         return BoolConstant;
          }
        case 22: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
