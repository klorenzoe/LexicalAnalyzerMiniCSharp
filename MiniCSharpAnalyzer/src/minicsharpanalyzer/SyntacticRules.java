
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 22 11:44:22 CST 2018
//----------------------------------------------------

package minicsharpanalyzer;

import java.util.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 22 11:44:22 CST 2018
  */
public class SyntacticRules extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntacticRules() {super();}

  /** Constructor which sets the default scanner. */
  public SyntacticRules(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticRules(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\004\004\000\002\002\004\000\002\056" +
    "\002\000\002\056\004\000\002\060\002\000\002\057\010" +
    "\000\002\006\003\000\002\006\003\000\002\061\002\000" +
    "\002\006\004\000\002\062\002\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\054\004\000\002\055" +
    "\002\000\002\055\003\000\002\007\004\000\002\013\004" +
    "\000\002\013\005\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\004\000\002\063\002\000\002\064\002\000\002\010" +
    "\012\000\002\065\002\000\002\066\002\000\002\010\012" +
    "\000\002\067\002\000\002\010\007\000\002\070\002\000" +
    "\002\010\007\000\002\015\002\000\002\015\004\000\002" +
    "\015\003\000\002\017\005\000\002\051\002\000\002\051" +
    "\003\000\002\011\011\000\002\020\002\000\002\020\004" +
    "\000\002\021\002\000\002\021\004\000\002\023\004\000" +
    "\002\023\003\000\002\024\005\000\002\052\002\000\002" +
    "\052\003\000\002\022\002\000\002\022\004\000\002\026" +
    "\003\000\002\026\003\000\002\012\007\000\002\027\002" +
    "\000\002\027\004\000\002\030\004\000\002\030\004\000" +
    "\002\053\007\000\002\053\005\000\002\016\006\000\002" +
    "\031\002\000\002\031\004\000\002\032\002\000\002\032" +
    "\004\000\002\033\004\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\034\010\000\002\042\002\000\002\042\004\000\002\035" +
    "\007\000\002\036\013\000\002\025\002\000\002\025\003" +
    "\000\002\040\005\000\002\037\004\000\002\041\007\000" +
    "\002\043\003\000\002\043\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\004\000\002\003\006\000\002\003" +
    "\010\000\002\003\004\000\002\003\005\000\002\003\004" +
    "\000\002\003\005\000\002\003\006\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\005\000\002\044\003\000\002\044\005\000\002\045" +
    "\006\000\002\045\010\000\002\045\010\000\002\046\006" +
    "\000\002\046\010\000\002\047\002\000\002\047\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\030\003\uffff\004\uffff\007\uffff\010\uffff\011" +
    "\uffff\066\uffff\067\uffff\070\uffff\071\uffff\077\005\101\uffff" +
    "\001\002\000\004\002\375\001\002\000\004\076\370\001" +
    "\002\000\026\003\025\004\032\007\015\010\ufff9\011\ufff7" +
    "\066\022\067\020\070\031\071\021\101\023\001\002\000" +
    "\030\003\uffff\004\uffff\007\uffff\010\uffff\011\uffff\066\uffff" +
    "\067\uffff\070\uffff\071\uffff\077\005\101\uffff\001\002\000" +
    "\026\003\ufffe\004\ufffe\007\ufffe\010\ufffe\011\ufffe\066\ufffe" +
    "\067\ufffe\070\ufffe\071\ufffe\101\ufffe\001\002\000\004\007" +
    "\364\001\002\000\014\004\032\066\022\067\020\070\031" +
    "\071\021\001\002\000\004\011\336\001\002\000\004\010" +
    "\311\001\002\000\004\004\302\001\002\000\030\002\ufff2" +
    "\003\025\004\032\007\015\010\ufff9\011\ufff7\066\022\067" +
    "\020\070\031\071\021\101\023\001\002\000\006\004\041" +
    "\065\040\001\002\000\010\004\uffec\036\uffec\065\uffec\001" +
    "\002\000\010\004\uffea\036\uffea\065\uffea\001\002\000\010" +
    "\004\uffed\036\uffed\065\uffed\001\002\000\014\004\032\066" +
    "\022\067\020\070\031\071\021\001\002\000\004\002\001" +
    "\001\002\000\006\041\035\064\034\001\002\000\004\041" +
    "\033\001\002\000\030\002\ufffa\003\ufffa\004\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\101" +
    "\ufffa\001\002\000\030\002\ufffb\003\ufffb\004\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\101" +
    "\ufffb\001\002\000\010\004\uffeb\036\uffeb\065\uffeb\001\002" +
    "\000\010\004\uffe9\036\uffe9\065\uffe9\001\002\000\106\002" +
    "\ufff0\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\016\ufff0\017\ufff0\020\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0" +
    "\031\ufff0\035\ufff0\037\ufff0\040\ufff0\041\ufff0\044\ufff0\060" +
    "\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\074\ufff0\075\ufff0" +
    "\101\ufff0\001\002\000\030\002\ufff5\003\ufff5\004\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5" +
    "\101\ufff5\001\002\000\030\002\ufff4\003\ufff4\004\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4" +
    "\101\ufff4\001\002\000\006\004\037\065\040\001\002\000" +
    "\010\034\uffee\036\uffee\041\uffee\001\002\000\010\004\uffe8" +
    "\036\uffe8\065\uffe8\001\002\000\006\035\042\041\uffef\001" +
    "\002\000\020\004\uffe7\036\uffe7\066\uffe7\067\uffe7\070\uffe7" +
    "\071\uffe7\101\uffe7\001\002\000\020\004\032\036\uffdd\066" +
    "\022\067\020\070\031\071\021\101\023\001\002\000\006" +
    "\004\277\065\040\001\002\000\006\034\272\036\uffdb\001" +
    "\002\000\004\036\uffe6\001\002\000\004\036\050\001\002" +
    "\000\004\037\051\001\002\000\074\004\uffc1\005\uffc1\006" +
    "\uffc1\012\uffc1\013\uffc1\016\uffc1\017\uffc1\020\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\035\uffc1\037\uffc1\040\uffc1\041\uffc1\044\uffc1\060\uffc1" +
    "\066\uffc1\067\uffc1\070\uffc1\071\uffc1\074\uffc1\075\uffc1\101" +
    "\uffc1\001\002\000\032\002\uffe5\003\uffe5\004\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\040\uffe5\066\uffe5\067\uffe5\070\uffe5\071" +
    "\uffe5\101\uffe5\001\002\000\074\004\112\005\106\006\116" +
    "\012\055\013\056\016\102\017\074\020\073\022\072\023" +
    "\077\024\067\025\070\026\114\027\076\030\057\031\115" +
    "\035\101\037\051\040\uffbf\041\066\044\062\060\110\066" +
    "\022\067\020\070\031\071\021\074\065\075\064\101\023" +
    "\001\002\000\064\004\uffb7\005\uffb7\006\uffb7\012\uffb7\013" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\035" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\044\uffb7\060\uffb7\074\uffb7" +
    "\075\uffb7\001\002\000\044\034\uff7f\036\uff7f\041\uff7f\043" +
    "\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f" +
    "\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f\062" +
    "\uff7f\001\002\000\044\034\uff8e\036\uff8e\041\uff8e\043\uff8e" +
    "\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052" +
    "\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\062\uff8e" +
    "\001\002\000\006\035\267\061\270\001\002\000\044\034" +
    "\uff91\036\uff91\041\uff91\043\uff91\044\uff91\045\uff91\046\uff91" +
    "\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055" +
    "\uff91\056\uff91\057\uff91\062\uff91\001\002\000\064\004\uffb9" +
    "\005\uffb9\006\uffb9\012\uffb9\013\uffb9\016\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\031\uffb9\035\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\044\uffb9\060\uffb9\074\uffb9\075\uffb9\001\002\000\040" +
    "\004\122\005\106\006\116\012\055\013\056\024\067\025" +
    "\070\027\076\030\057\031\115\035\101\044\062\060\110" +
    "\074\065\075\064\001\002\000\064\004\uffb6\005\uffb6\006" +
    "\uffb6\012\uffb6\013\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\035\uffb6\037\uffb6\040\uffb6\041\uffb6\044\uffb6" +
    "\060\uffb6\074\uffb6\075\uffb6\001\002\000\044\034\uff81\036" +
    "\uff81\041\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81" +
    "\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056" +
    "\uff81\057\uff81\062\uff81\001\002\000\044\034\uff83\036\uff83" +
    "\041\uff83\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050" +
    "\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83" +
    "\057\uff83\062\uff83\001\002\000\064\004\uffbc\005\uffbc\006" +
    "\uffbc\012\uffbc\013\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\035\uffbc\037\uffbc\040\uffbc\041\uffbc\044\uffbc" +
    "\060\uffbc\074\uffbc\075\uffbc\001\002\000\004\035\263\001" +
    "\002\000\004\035\256\001\002\000\064\004\uffba\005\uffba" +
    "\006\uffba\012\uffba\013\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\035\uffba\037\uffba\040\uffba\041\uffba\044" +
    "\uffba\060\uffba\074\uffba\075\uffba\001\002\000\042\004\122" +
    "\005\106\006\116\012\055\013\056\024\067\025\070\027" +
    "\076\030\057\031\115\035\101\041\uffaf\044\062\060\110" +
    "\074\065\075\064\001\002\000\004\035\245\001\002\000" +
    "\004\035\241\001\002\000\064\004\uffb5\005\uffb5\006\uffb5" +
    "\012\uffb5\013\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\035\uffb5\037\uffb5\040\uffb5\041\uffb5\044\uffb5\060" +
    "\uffb5\074\uffb5\075\uffb5\001\002\000\006\035\237\061\236" +
    "\001\002\000\004\041\235\001\002\000\004\040\234\001" +
    "\002\000\040\004\122\005\106\006\116\012\055\013\056" +
    "\024\067\025\070\027\076\030\057\031\115\035\101\044" +
    "\062\060\110\074\065\075\064\001\002\000\004\035\221" +
    "\001\002\000\064\004\uffbb\005\uffbb\006\uffbb\012\uffbb\013" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\035" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\044\uffbb\060\uffbb\074\uffbb" +
    "\075\uffbb\001\002\000\040\041\220\043\136\044\133\045" +
    "\130\046\131\047\142\050\140\051\144\052\143\053\127" +
    "\054\132\055\137\056\135\057\134\062\141\001\002\000" +
    "\046\034\uff8f\036\uff8f\041\uff8f\042\216\043\uff8f\044\uff8f" +
    "\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053" +
    "\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\062\uff8f\001\002" +
    "\000\044\034\uff82\036\uff82\041\uff82\043\uff82\044\uff82\045" +
    "\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82\053\uff82" +
    "\054\uff82\055\uff82\056\uff82\057\uff82\062\uff82\001\002\000" +
    "\074\004\uffc0\005\uffc0\006\uffc0\012\uffc0\013\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\035\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\044\uffc0\060\uffc0\066\uffc0\067\uffc0\070\uffc0\071" +
    "\uffc0\074\uffc0\075\uffc0\101\uffc0\001\002\000\040\004\122" +
    "\005\106\006\116\012\055\013\056\024\067\025\070\027" +
    "\076\030\057\031\115\035\101\044\062\060\110\074\065" +
    "\075\064\001\002\000\062\004\122\005\106\006\116\012" +
    "\055\013\056\016\102\017\074\020\073\022\072\023\077" +
    "\024\067\025\070\026\114\027\076\030\057\031\115\035" +
    "\101\037\051\040\uffbf\041\066\044\062\060\110\074\065" +
    "\075\064\001\002\000\050\004\uffe9\035\123\041\uff8c\042" +
    "\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c" +
    "\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057" +
    "\uff8c\062\uff8c\065\uffe9\001\002\000\044\034\uff90\036\uff90" +
    "\041\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050" +
    "\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90" +
    "\057\uff90\062\uff90\001\002\000\004\035\210\001\002\000" +
    "\004\035\120\001\002\000\044\034\uff80\036\uff80\041\uff80" +
    "\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051" +
    "\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80" +
    "\062\uff80\001\002\000\064\004\uffb8\005\uffb8\006\uffb8\012" +
    "\uffb8\013\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\035\uffb8\037\uffb8\040\uffb8\041\uffb8\044\uffb8\060\uffb8" +
    "\074\uffb8\075\uffb8\001\002\000\040\004\122\005\106\006" +
    "\116\012\055\013\056\024\067\025\070\027\076\030\057" +
    "\031\115\035\101\044\062\060\110\074\065\075\064\001" +
    "\002\000\040\036\207\043\136\044\133\045\130\046\131" +
    "\047\142\050\140\051\144\052\143\053\127\054\132\055" +
    "\137\056\135\057\134\062\141\001\002\000\050\034\uff8c" +
    "\035\123\036\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045" +
    "\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c" +
    "\054\uff8c\055\uff8c\056\uff8c\057\uff8c\062\uff8c\001\002\000" +
    "\042\004\122\005\106\006\116\012\055\013\056\024\067" +
    "\025\070\027\076\030\057\031\115\035\101\036\uff85\044" +
    "\062\060\110\074\065\075\064\001\002\000\006\034\205" +
    "\036\uff84\001\002\000\004\036\204\001\002\000\042\034" +
    "\uffaa\036\uffaa\043\136\044\133\045\130\046\131\047\142" +
    "\050\140\051\144\052\143\053\127\054\132\055\137\056" +
    "\135\057\134\062\141\001\002\000\040\004\122\005\106" +
    "\006\116\012\055\013\056\024\067\025\070\027\076\030" +
    "\057\031\115\035\101\044\062\060\110\074\065\075\064" +
    "\001\002\000\040\004\122\005\106\006\116\012\055\013" +
    "\056\024\067\025\070\027\076\030\057\031\115\035\101" +
    "\044\062\060\110\074\065\075\064\001\002\000\040\004" +
    "\122\005\106\006\116\012\055\013\056\024\067\025\070" +
    "\027\076\030\057\031\115\035\101\044\062\060\110\074" +
    "\065\075\064\001\002\000\040\004\122\005\106\006\116" +
    "\012\055\013\056\024\067\025\070\027\076\030\057\031" +
    "\115\035\101\044\062\060\110\074\065\075\064\001\002" +
    "\000\040\004\122\005\106\006\116\012\055\013\056\024" +
    "\067\025\070\027\076\030\057\031\115\035\101\044\062" +
    "\060\110\074\065\075\064\001\002\000\040\004\122\005" +
    "\106\006\116\012\055\013\056\024\067\025\070\027\076" +
    "\030\057\031\115\035\101\044\062\060\110\074\065\075" +
    "\064\001\002\000\040\004\122\005\106\006\116\012\055" +
    "\013\056\024\067\025\070\027\076\030\057\031\115\035" +
    "\101\044\062\060\110\074\065\075\064\001\002\000\040" +
    "\004\122\005\106\006\116\012\055\013\056\024\067\025" +
    "\070\027\076\030\057\031\115\035\101\044\062\060\110" +
    "\074\065\075\064\001\002\000\040\004\122\005\106\006" +
    "\116\012\055\013\056\024\067\025\070\027\076\030\057" +
    "\031\115\035\101\044\062\060\110\074\065\075\064\001" +
    "\002\000\040\004\122\005\106\006\116\012\055\013\056" +
    "\024\067\025\070\027\076\030\057\031\115\035\101\044" +
    "\062\060\110\074\065\075\064\001\002\000\010\004\150" +
    "\032\153\033\151\001\002\000\040\004\122\005\106\006" +
    "\116\012\055\013\056\024\067\025\070\027\076\030\057" +
    "\031\115\035\101\044\062\060\110\074\065\075\064\001" +
    "\002\000\040\004\122\005\106\006\116\012\055\013\056" +
    "\024\067\025\070\027\076\030\057\031\115\035\101\044" +
    "\062\060\110\074\065\075\064\001\002\000\040\004\122" +
    "\005\106\006\116\012\055\013\056\024\067\025\070\027" +
    "\076\030\057\031\115\035\101\044\062\060\110\074\065" +
    "\075\064\001\002\000\044\034\uffa0\036\uffa0\041\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0" +
    "\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\062" +
    "\uffa0\001\002\000\044\034\uff9f\036\uff9f\041\uff9f\043\uff9f" +
    "\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052" +
    "\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\062\uff9f" +
    "\001\002\000\044\034\uffa3\036\uffa3\041\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\050\140\051\144\052\143" +
    "\053\127\054\132\055\137\056\135\057\134\062\uffa3\001" +
    "\002\000\050\034\uff8b\035\167\036\uff8b\041\uff8b\042\uff8b" +
    "\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051" +
    "\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b" +
    "\062\uff8b\001\002\000\004\035\162\001\002\000\004\035" +
    "\157\001\002\000\004\035\154\001\002\000\040\004\122" +
    "\005\106\006\116\012\055\013\056\024\067\025\070\027" +
    "\076\030\057\031\115\035\101\044\062\060\110\074\065" +
    "\075\064\001\002\000\040\036\156\043\136\044\133\045" +
    "\130\046\131\047\142\050\140\051\144\052\143\053\127" +
    "\054\132\055\137\056\135\057\134\062\141\001\002\000" +
    "\004\035\uff87\001\002\000\042\004\122\005\106\006\116" +
    "\012\055\013\056\024\067\025\070\027\076\030\057\031" +
    "\115\035\101\036\uff85\044\062\060\110\074\065\075\064" +
    "\001\002\000\004\036\161\001\002\000\044\034\uff88\036" +
    "\uff88\041\uff88\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88" +
    "\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056" +
    "\uff88\057\uff88\062\uff88\001\002\000\040\004\122\005\106" +
    "\006\116\012\055\013\056\024\067\025\070\027\076\030" +
    "\057\031\115\035\101\044\062\060\110\074\065\075\064" +
    "\001\002\000\040\034\164\043\136\044\133\045\130\046" +
    "\131\047\142\050\140\051\144\052\143\053\127\054\132" +
    "\055\137\056\135\057\134\062\141\001\002\000\040\004" +
    "\122\005\106\006\116\012\055\013\056\024\067\025\070" +
    "\027\076\030\057\031\115\035\101\044\062\060\110\074" +
    "\065\075\064\001\002\000\040\036\166\043\136\044\133" +
    "\045\130\046\131\047\142\050\140\051\144\052\143\053" +
    "\127\054\132\055\137\056\135\057\134\062\141\001\002" +
    "\000\004\035\uff86\001\002\000\042\004\122\005\106\006" +
    "\116\012\055\013\056\024\067\025\070\027\076\030\057" +
    "\031\115\035\101\036\uff85\044\062\060\110\074\065\075" +
    "\064\001\002\000\004\036\171\001\002\000\044\034\uff89" +
    "\036\uff89\041\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047" +
    "\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054\uff89\055\uff89" +
    "\056\uff89\057\uff89\062\uff89\001\002\000\044\034\uffa1\036" +
    "\uffa1\041\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1" +
    "\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056" +
    "\uffa1\057\uffa1\062\uffa1\001\002\000\044\034\uff9c\036\uff9c" +
    "\041\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050" +
    "\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c" +
    "\057\uff9c\062\uff9c\001\002\000\044\034\uffa7\036\uffa7\041" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\140" +
    "\051\144\052\143\053\127\054\132\055\137\056\135\057" +
    "\134\062\uffa7\001\002\000\044\034\uff9b\036\uff9b\041\uff9b" +
    "\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b" +
    "\062\uff9b\001\002\000\044\034\uff9a\036\uff9a\041\uff9a\043" +
    "\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a" +
    "\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\062" +
    "\uff9a\001\002\000\044\034\uffa6\036\uffa6\041\uffa6\043\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\140\051\144\052" +
    "\143\053\127\054\132\055\137\056\135\057\134\062\uffa6" +
    "\001\002\000\044\034\uff9d\036\uff9d\041\uff9d\043\uff9d\044" +
    "\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d" +
    "\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\062\uff9d\001" +
    "\002\000\044\034\uffa4\036\uffa4\041\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\046\uffa4\047\uffa4\050\140\051\144\052\143\053" +
    "\127\054\132\055\137\056\135\057\134\062\uffa4\001\002" +
    "\000\044\034\uffa5\036\uffa5\041\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\046\uffa5\047\uffa5\050\140\051\144\052\143\053\127" +
    "\054\132\055\137\056\135\057\134\062\uffa5\001\002\000" +
    "\044\034\uff9e\036\uff9e\041\uff9e\043\uff9e\044\uff9e\045\uff9e" +
    "\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054" +
    "\uff9e\055\uff9e\056\uff9e\057\uff9e\062\uff9e\001\002\000\044" +
    "\034\uff8a\036\uff8a\041\uff8a\043\uff8a\044\uff8a\045\uff8a\046" +
    "\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a" +
    "\055\uff8a\056\uff8a\057\uff8a\062\uff8a\001\002\000\040\004" +
    "\122\005\106\006\116\012\055\013\056\024\067\025\070" +
    "\027\076\030\057\031\115\035\101\044\062\060\110\074" +
    "\065\075\064\001\002\000\042\034\uffa9\036\uffa9\043\136" +
    "\044\133\045\130\046\131\047\142\050\140\051\144\052" +
    "\143\053\127\054\132\055\137\056\135\057\134\062\141" +
    "\001\002\000\044\034\uff92\036\uff92\041\uff92\043\uff92\044" +
    "\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92" +
    "\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92\062\uff92\001" +
    "\002\000\040\004\122\005\106\006\116\012\055\013\056" +
    "\024\067\025\070\027\076\030\057\031\115\035\101\044" +
    "\062\060\110\074\065\075\064\001\002\000\006\034\205" +
    "\036\212\001\002\000\004\041\213\001\002\000\064\004" +
    "\uffab\005\uffab\006\uffab\012\uffab\013\uffab\016\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026" +
    "\uffab\027\uffab\030\uffab\031\uffab\035\uffab\037\uffab\040\uffab" +
    "\041\uffab\044\uffab\060\uffab\074\uffab\075\uffab\001\002\000" +
    "\004\040\uffbe\001\002\000\044\034\uff99\036\uff99\041\uff99" +
    "\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051" +
    "\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99" +
    "\062\uff99\001\002\000\040\004\122\005\106\006\116\012" +
    "\055\013\056\024\067\025\070\027\076\030\057\031\115" +
    "\035\101\044\062\060\110\074\065\075\064\001\002\000" +
    "\044\034\uff8d\036\uff8d\041\uff8d\043\136\044\133\045\130" +
    "\046\131\047\142\050\140\051\144\052\143\053\127\054" +
    "\132\055\137\056\135\057\134\062\uff8d\001\002\000\064" +
    "\004\uffbd\005\uffbd\006\uffbd\012\uffbd\013\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\035\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\044\uffbd\060\uffbd\074\uffbd\075\uffbd\001\002" +
    "\000\042\004\122\005\106\006\116\012\055\013\056\024" +
    "\067\025\070\027\076\030\057\031\115\035\101\041\uffaf" +
    "\044\062\060\110\074\065\075\064\001\002\000\042\036" +
    "\uffae\041\uffae\043\136\044\133\045\130\046\131\047\142" +
    "\050\140\051\144\052\143\053\127\054\132\055\137\056" +
    "\135\057\134\062\141\001\002\000\004\041\224\001\002" +
    "\000\040\004\122\005\106\006\116\012\055\013\056\024" +
    "\067\025\070\027\076\030\057\031\115\035\101\044\062" +
    "\060\110\074\065\075\064\001\002\000\040\041\226\043" +
    "\136\044\133\045\130\046\131\047\142\050\140\051\144" +
    "\052\143\053\127\054\132\055\137\056\135\057\134\062" +
    "\141\001\002\000\042\004\122\005\106\006\116\012\055" +
    "\013\056\024\067\025\070\027\076\030\057\031\115\035" +
    "\101\036\uffaf\044\062\060\110\074\065\075\064\001\002" +
    "\000\004\036\230\001\002\000\060\004\122\005\106\006" +
    "\116\012\055\013\056\016\102\017\074\020\073\022\072" +
    "\023\077\024\067\025\070\026\114\027\076\030\057\031" +
    "\115\035\101\037\051\041\066\044\062\060\110\074\065" +
    "\075\064\001\002\000\064\004\uffb0\005\uffb0\006\uffb0\012" +
    "\uffb0\013\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\035\uffb0\037\uffb0\040\uffb0\041\uffb0\044\uffb0\060\uffb0" +
    "\074\uffb0\075\uffb0\001\002\000\040\036\233\043\136\044" +
    "\133\045\130\046\131\047\142\050\140\051\144\052\143" +
    "\053\127\054\132\055\137\056\135\057\134\062\141\001" +
    "\002\000\044\034\uffa8\036\uffa8\041\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053" +
    "\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\062\uffa8\001\002" +
    "\000\110\002\uffc2\003\uffc2\004\uffc2\005\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\016\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\035\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\044\uffc2\060\uffc2\066\uffc2\067\uffc2\070\uffc2\071" +
    "\uffc2\074\uffc2\075\uffc2\101\uffc2\001\002\000\064\004\uffac" +
    "\005\uffac\006\uffac\012\uffac\013\uffac\016\uffac\017\uffac\020" +
    "\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac" +
    "\027\uffac\030\uffac\031\uffac\035\uffac\037\uffac\040\uffac\041" +
    "\uffac\044\uffac\060\uffac\074\uffac\075\uffac\001\002\000\044" +
    "\034\uff96\036\uff96\041\uff96\043\uff96\044\uff96\045\uff96\046" +
    "\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96" +
    "\055\uff96\056\uff96\057\uff96\062\uff96\001\002\000\004\036" +
    "\240\001\002\000\044\034\uff95\036\uff95\041\uff95\043\uff95" +
    "\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052" +
    "\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\062\uff95" +
    "\001\002\000\040\004\122\005\106\006\116\012\055\013" +
    "\056\024\067\025\070\027\076\030\057\031\115\035\101" +
    "\044\062\060\110\074\065\075\064\001\002\000\040\036" +
    "\243\043\136\044\133\045\130\046\131\047\142\050\140" +
    "\051\144\052\143\053\127\054\132\055\137\056\135\057" +
    "\134\062\141\001\002\000\060\004\122\005\106\006\116" +
    "\012\055\013\056\016\102\017\074\020\073\022\072\023" +
    "\077\024\067\025\070\026\114\027\076\030\057\031\115" +
    "\035\101\037\051\041\066\044\062\060\110\074\065\075" +
    "\064\001\002\000\064\004\uffb1\005\uffb1\006\uffb1\012\uffb1" +
    "\013\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\035\uffb1\037\uffb1\040\uffb1\041\uffb1\044\uffb1\060\uffb1\074" +
    "\uffb1\075\uffb1\001\002\000\040\004\122\005\106\006\116" +
    "\012\055\013\056\024\067\025\070\027\076\030\057\031" +
    "\115\035\101\044\062\060\110\074\065\075\064\001\002" +
    "\000\040\036\247\043\136\044\133\045\130\046\131\047" +
    "\142\050\140\051\144\052\143\053\127\054\132\055\137" +
    "\056\135\057\134\062\141\001\002\000\060\004\122\005" +
    "\106\006\116\012\055\013\056\016\102\017\074\020\073" +
    "\022\072\023\077\024\067\025\070\026\114\027\076\030" +
    "\057\031\115\035\101\037\051\041\066\044\062\060\110" +
    "\074\065\075\064\001\002\000\064\004\uffb3\005\uffb3\006" +
    "\uffb3\012\uffb3\013\uffb3\016\uffb3\017\uffb3\020\uffb3\021\252" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\035\uffb3\037\uffb3\040\uffb3\041\uffb3\044\uffb3" +
    "\060\uffb3\074\uffb3\075\uffb3\001\002\000\064\004\uffb4\005" +
    "\uffb4\006\uffb4\012\uffb4\013\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\035\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\044\uffb4\060\uffb4\074\uffb4\075\uffb4\001\002\000\060\004" +
    "\122\005\106\006\116\012\055\013\056\016\102\017\074" +
    "\020\073\022\072\023\077\024\067\025\070\026\114\027" +
    "\076\030\057\031\115\035\101\037\051\041\066\044\062" +
    "\060\110\074\065\075\064\001\002\000\064\004\uffb2\005" +
    "\uffb2\006\uffb2\012\uffb2\013\uffb2\016\uffb2\017\uffb2\020\uffb2" +
    "\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\035\uffb2\037\uffb2\040\uffb2\041\uffb2" +
    "\044\uffb2\060\uffb2\074\uffb2\075\uffb2\001\002\000\004\041" +
    "\255\001\002\000\064\004\uffad\005\uffad\006\uffad\012\uffad" +
    "\013\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023" +
    "\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad" +
    "\035\uffad\037\uffad\040\uffad\041\uffad\044\uffad\060\uffad\074" +
    "\uffad\075\uffad\001\002\000\040\004\122\005\106\006\116" +
    "\012\055\013\056\024\067\025\070\027\076\030\057\031" +
    "\115\035\101\044\062\060\110\074\065\075\064\001\002" +
    "\000\040\034\260\043\136\044\133\045\130\046\131\047" +
    "\142\050\140\051\144\052\143\053\127\054\132\055\137" +
    "\056\135\057\134\062\141\001\002\000\014\004\032\066" +
    "\022\067\020\070\031\071\021\001\002\000\006\036\262" +
    "\065\040\001\002\000\044\034\uff97\036\uff97\041\uff97\043" +
    "\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97" +
    "\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97\062" +
    "\uff97\001\002\000\004\004\264\001\002\000\004\036\265" +
    "\001\002\000\044\034\uff98\036\uff98\041\uff98\043\uff98\044" +
    "\uff98\045\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98" +
    "\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98\062\uff98\001" +
    "\002\000\044\034\uffa2\036\uffa2\041\uffa2\043\uffa2\044\uffa2" +
    "\045\uffa2\046\uffa2\047\uffa2\050\140\051\144\052\143\053" +
    "\127\054\132\055\137\056\135\057\134\062\uffa2\001\002" +
    "\000\004\036\271\001\002\000\044\034\uff94\036\uff94\041" +
    "\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94" +
    "\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94\057" +
    "\uff94\062\uff94\001\002\000\044\034\uff93\036\uff93\041\uff93" +
    "\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051" +
    "\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\057\uff93" +
    "\062\uff93\001\002\000\016\004\032\066\022\067\020\070" +
    "\031\071\021\101\023\001\002\000\004\036\uffdc\001\002" +
    "\000\006\034\272\036\uffd9\001\002\000\004\036\uffda\001" +
    "\002\000\004\036\uffd8\001\002\000\010\034\uffef\036\uffef" +
    "\041\uffef\001\002\000\004\002\ufff3\001\002\000\004\002" +
    "\ufff1\001\002\000\004\035\303\001\002\000\020\004\uffe4" +
    "\036\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4\101\uffe4\001" +
    "\002\000\020\004\032\036\uffdd\066\022\067\020\070\031" +
    "\071\021\101\023\001\002\000\004\036\uffe3\001\002\000" +
    "\004\036\307\001\002\000\004\037\051\001\002\000\032" +
    "\002\uffe2\003\uffe2\004\uffe2\007\uffe2\010\uffe2\011\uffe2\040" +
    "\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\101\uffe2\001\002" +
    "\000\004\004\313\001\002\000\030\002\ufff8\003\ufff8\004" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\066\ufff8\067\ufff8\070\ufff8" +
    "\071\ufff8\101\ufff8\001\002\000\010\014\314\015\uffd6\037" +
    "\uffd6\001\002\000\004\004\335\001\002\000\006\015\317" +
    "\037\uffd4\001\002\000\004\037\327\001\002\000\004\004" +
    "\320\001\002\000\006\034\322\037\uffd1\001\002\000\004" +
    "\037\uffd3\001\002\000\004\004\324\001\002\000\004\037" +
    "\uffd2\001\002\000\006\034\322\037\uffcf\001\002\000\004" +
    "\037\uffd0\001\002\000\004\037\uffce\001\002\000\022\004" +
    "\uffcd\007\uffcd\040\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd" +
    "\101\uffcd\001\002\000\022\004\032\007\015\040\333\066" +
    "\022\067\020\070\031\071\021\101\023\001\002\000\022" +
    "\004\uffcb\007\uffcb\040\uffcb\066\uffcb\067\uffcb\070\uffcb\071" +
    "\uffcb\101\uffcb\001\002\000\022\004\uffcc\007\uffcc\040\uffcc" +
    "\066\uffcc\067\uffcc\070\uffcc\071\uffcc\101\uffcc\001\002\000" +
    "\030\002\uffd7\003\uffd7\004\uffd7\007\uffd7\010\uffd7\011\uffd7" +
    "\066\uffd7\067\uffd7\070\uffd7\071\uffd7\101\uffd7\001\002\000" +
    "\022\004\uffca\007\uffca\040\uffca\066\uffca\067\uffca\070\uffca" +
    "\071\uffca\101\uffca\001\002\000\006\015\uffd5\037\uffd5\001" +
    "\002\000\004\004\340\001\002\000\030\002\ufff6\003\ufff6" +
    "\004\ufff6\007\ufff6\010\ufff6\011\ufff6\066\ufff6\067\ufff6\070" +
    "\ufff6\071\ufff6\101\ufff6\001\002\000\004\037\341\001\002" +
    "\000\020\004\uffc8\007\uffc8\040\uffc8\066\uffc8\067\uffc8\070" +
    "\uffc8\071\uffc8\001\002\000\020\004\032\007\344\040\345" +
    "\066\022\067\020\070\031\071\021\001\002\000\006\004" +
    "\347\065\040\001\002\000\004\004\347\001\002\000\030" +
    "\002\uffc9\003\uffc9\004\uffc9\007\uffc9\010\uffc9\011\uffc9\066" +
    "\uffc9\067\uffc9\070\uffc9\071\uffc9\101\uffc9\001\002\000\020" +
    "\004\uffc7\007\uffc7\040\uffc7\066\uffc7\067\uffc7\070\uffc7\071" +
    "\uffc7\001\002\000\006\035\351\061\352\001\002\000\020" +
    "\004\uffc5\007\uffc5\040\uffc5\066\uffc5\067\uffc5\070\uffc5\071" +
    "\uffc5\001\002\000\020\004\032\036\uffdd\066\022\067\020" +
    "\070\031\071\021\101\023\001\002\000\004\041\353\001" +
    "\002\000\020\004\uffc3\007\uffc3\040\uffc3\066\uffc3\067\uffc3" +
    "\070\uffc3\071\uffc3\001\002\000\004\036\355\001\002\000" +
    "\004\041\356\001\002\000\020\004\uffc4\007\uffc4\040\uffc4" +
    "\066\uffc4\067\uffc4\070\uffc4\071\uffc4\001\002\000\020\004" +
    "\uffc6\007\uffc6\040\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6" +
    "\001\002\000\006\004\361\065\040\001\002\000\004\061" +
    "\362\001\002\000\004\037\051\001\002\000\032\002\uffe0" +
    "\003\uffe0\004\uffe0\007\uffe0\010\uffe0\011\uffe0\040\uffe0\066" +
    "\uffe0\067\uffe0\070\uffe0\071\uffe0\101\uffe0\001\002\000\004" +
    "\004\365\001\002\000\004\061\366\001\002\000\004\037" +
    "\051\001\002\000\032\002\uffde\003\uffde\004\uffde\007\uffde" +
    "\010\uffde\011\uffde\040\uffde\066\uffde\067\uffde\070\uffde\071" +
    "\uffde\101\uffde\001\002\000\004\050\371\001\002\000\004" +
    "\100\372\001\002\000\004\052\ufffd\001\002\000\004\052" +
    "\374\001\002\000\030\003\ufffc\004\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\077\ufffc\101" +
    "\ufffc\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\010\004\003\056\005\057\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\016\006\015" +
    "\007\027\010\026\013\025\054\023\061\013\062\012\067" +
    "\011\070\010\001\001\000\006\056\007\057\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\357\001" +
    "\001\000\004\012\336\001\001\000\004\011\311\001\001" +
    "\000\002\001\001\000\030\002\016\006\015\007\027\010" +
    "\026\013\025\054\300\055\277\061\013\062\012\067\011" +
    "\070\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\063\042\001\001\000\010\002" +
    "\043\013\044\015\045\001\001\000\002\001\001\000\004" +
    "\017\272\001\001\000\004\064\046\001\001\000\002\001" +
    "\001\000\004\016\051\001\001\000\004\031\052\001\001" +
    "\000\002\001\001\000\042\002\043\003\103\007\106\013" +
    "\025\016\074\032\077\033\110\034\102\035\070\036\060" +
    "\037\116\040\053\041\062\044\104\045\112\050\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\265\044\104\045\112\050\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\221\025\253\044\104\045\112\050\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\231\044\104\045\112\050\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\214" +
    "\044\104\045\112\050\057\001\001\000\034\003\103\016" +
    "\074\032\213\033\110\034\102\035\070\036\060\037\116" +
    "\040\053\041\062\044\104\045\112\050\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\120\044\104\045\112\050\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\125\043\123\044\104\045" +
    "\112\047\124\050\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\202\044\104\045" +
    "\112\050\057\001\001\000\012\003\201\044\104\045\112" +
    "\050\057\001\001\000\012\003\200\044\104\045\112\050" +
    "\057\001\001\000\012\003\177\044\104\045\112\050\057" +
    "\001\001\000\012\003\176\044\104\045\112\050\057\001" +
    "\001\000\012\003\175\044\104\045\112\050\057\001\001" +
    "\000\012\003\174\044\104\045\112\050\057\001\001\000" +
    "\012\003\173\044\104\045\112\050\057\001\001\000\012" +
    "\003\172\044\104\045\112\050\057\001\001\000\012\003" +
    "\171\044\104\045\112\050\057\001\001\000\004\046\151" +
    "\001\001\000\012\003\146\044\104\045\112\050\057\001" +
    "\001\000\012\003\145\044\104\045\112\050\057\001\001" +
    "\000\012\003\144\044\104\045\112\050\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\154\044\104\045\112\050\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\125\043" +
    "\123\044\104\045\112\047\157\050\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\162\044\104\045" +
    "\112\050\057\001\001\000\002\001\001\000\012\003\164" +
    "\044\104\045\112\050\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\125\043\123\044\104\045\112" +
    "\047\167\050\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\205\044\104\045" +
    "\112\050\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\125\043\210\044\104\045\112\050\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\216\044" +
    "\104\045\112\050\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\221\025\222\044\104\045\112\050" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\224\044\104\045\112\050\057\001\001\000\002\001" +
    "\001\000\014\003\221\025\226\044\104\045\112\050\057" +
    "\001\001\000\002\001\001\000\032\003\103\016\074\033" +
    "\230\034\102\035\070\036\060\037\116\040\053\041\062" +
    "\044\104\045\112\050\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\241\044\104\045\112\050\057\001\001" +
    "\000\002\001\001\000\032\003\103\016\074\033\243\034" +
    "\102\035\070\036\060\037\116\040\053\041\062\044\104" +
    "\045\112\050\057\001\001\000\002\001\001\000\012\003" +
    "\245\044\104\045\112\050\057\001\001\000\002\001\001" +
    "\000\032\003\103\016\074\033\247\034\102\035\070\036" +
    "\060\037\116\040\053\041\062\044\104\045\112\050\057" +
    "\001\001\000\004\042\250\001\001\000\002\001\001\000" +
    "\032\003\103\016\074\033\252\034\102\035\070\036\060" +
    "\037\116\040\053\041\062\044\104\045\112\050\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\256\044\104\045\112\050\057\001\001\000" +
    "\002\001\001\000\004\002\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\043\013\273\001" +
    "\001\000\002\001\001\000\006\017\275\051\274\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\303\001\001\000\010\002\043\013\044\015\304\001" +
    "\001\000\004\066\305\001\001\000\002\001\001\000\004" +
    "\016\307\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\314\001\001\000\002\001\001" +
    "\000\004\021\315\001\001\000\002\001\001\000\004\023" +
    "\320\001\001\000\004\024\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\325\052" +
    "\324\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\327\001\001\000\020\002\016\007\330\010\333\013" +
    "\025\026\331\067\011\070\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\341\001\001\000\006\002\342\030" +
    "\345\001\001\000\004\053\356\001\001\000\004\053\347" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\043\013\044\015\353" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\362\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\366\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\372\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticRules$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticRules$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticRules$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String report_error_result="";
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
       // StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            report_error_result+="val: "+s.value+" "; 
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                report_error_result += " in line "+(s.left+1) +" ";   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    report_error_result+=", column "+(s.right+1)+" ";
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           thissmethod the message that was passed into thissmethod. */
        report_error_result+=" message: "+message+"\n";

   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        //System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntacticRules$actions {
  private final SyntacticRules parser;

  /** Constructor */
  CUP$SyntacticRules$actions(SyntacticRules parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SyntacticRules$do_action(
    int                        CUP$SyntacticRules$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticRules$parser,
    java.util.Stack            CUP$SyntacticRules$stack,
    int                        CUP$SyntacticRules$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticRules$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticRules$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Constant ::= nulll 
            {
              Object RESULT =null;
		 RESULT = "null!comodin"; 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Constant ::= StringConstant 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = s+"!string"; 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Constant ::= BoolConstant 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = b+"!bool"; 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Constant ::= DoubleConstant 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = d+"!double"; 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Constant ::= IntegerConstant 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = i.toString()+"!int"; 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Constant",38, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Actuals ::= ExprCommaPlus 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Actuals",37, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Actuals",37, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LibCall ::= setBytee parentesisfirst Expr comma Expr parentesissecond 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("LibCall",36, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LibCall ::= getBytee parentesisfirst Expr parentesissecond 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("LibCall",36, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Call ::= Expr point LibCall parentesisfirst Actuals parentesissecond 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Call",35, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Call ::= Expr point Identifierr parentesisfirst Actuals parentesissecond 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Call",35, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Call ::= Identifierr parentesisfirst Actuals parentesissecond 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Call",35, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LValue ::= Expr point Identifierr 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = i+"!var"; 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("LValue",34, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LValue ::= Identifierr 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = i+"!var"; 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("LValue",34, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Expr ::= LValue assignment Expr 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = Singleton.modifyValueToSymbol(val.toString(), e.toString(), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, val.toString().split("!")[0]+" = "+ e.toString().split("!")[0]); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Expr ::= thiss 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = "this"; 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Expr ::= LValue 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = v.toString(); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Expr ::= Call 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Expr ::= Constant 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = c.toString(); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Expr ::= mallocc parentesisfirst Expr parentesissecond 
            {
              String RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Expr ::= readline parentesisfirst parentesissecond 
            {
              String RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Expr ::= readline parentesis 
            {
              String RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Expr ::= readinteger parentesisfirst parentesissecond 
            {
              String RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expr ::= readinteger parentesis 
            {
              String RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expr ::= newarray parentesisfirst Expr comma Type parentesissecond 
            {
              String RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expr ::= neww parentesisfirst Identifierr parentesissecond 
            {
              String RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expr ::= not Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = Singleton.OperateUnaryOperators(e1, "!", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, "!"+e1.split("!")[0]); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expr ::= Expr or Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = Singleton.OperateValues(e1, e2, "||", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" || "+e2.split("!")[0]); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= Expr and Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = Singleton.OperateValues(e1, e2, "&&", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" && "+e2.split("!")[0]); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= Expr notequals Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = Singleton.OperateValues(e1, e2, "!=", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" != "+e2.split("!")[0]); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= Expr equals Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = Singleton.OperateValues(e1, e2, "==", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" == "+e2.split("!")[0]); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= Expr greaterEquals Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = Singleton.OperateValues(e1, e2, ">=", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" >= "+e2.split("!")[0]);
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= Expr greater Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = Singleton.OperateValues(e1, e2, ">",((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" > "+e2.split("!")[0]); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= Expr smallerEquals Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = Singleton.OperateValues(e1, e2, "<=", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" <= "+e2.split("!")[0]); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Expr smaller Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = Singleton.OperateValues(e1, e2, "<", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" < "+e2.split("!")[0]); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= minus Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = Singleton.OperateUnaryOperators(e1, "-", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, "-"+e1.split("!")[0]); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Expr percentage Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = Singleton.OperateValues(e1, e2, "%", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" % "+e2.split("!")[0]); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Expr div Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = Singleton.OperateValues(e1, e2, "/", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" / "+e2.split("!")[0]); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr times Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = Singleton.OperateValues(e1, e2, "*", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" * "+e2.split("!")[0]); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr minus Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = Singleton.OperateValues(e1, e2, "-", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" - "+e2.split("!")[0]); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr plus Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = Singleton.OperateValues(e1, e2, "+", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" + "+e2.split("!")[0]); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= parentesisfirst Expr parentesissecond 
            {
              String RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ExprCommaPlus ::= ExprCommaPlus comma Expr 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("ExprCommaPlus",33, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ExprCommaPlus ::= Expr 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("ExprCommaPlus",33, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PrintStmt ::= printt parentesisfirst ExprCommaPlus parentesissecond dotcomma 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("PrintStmt",31, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BreakStmt ::= breakk dotcomma 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("BreakStmt",29, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ReturnStmt ::= returnn ExprBool dotcomma 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("ReturnStmt",30, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExprBool ::= Expr 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("ExprBool",19, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ExprBool ::= 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("ExprBool",19, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ForStmt ::= forr parentesisfirst ExprBool dotcomma Expr dotcomma ExprBool parentesissecond Stmt 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("ForStmt",28, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // WhileStmt ::= whilee parentesisfirst Expr parentesissecond Stmt 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("WhileStmt",27, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ElseBool ::= elsee Stmt 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("ElseBool",32, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ElseBool ::= 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("ElseBool",32, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IfStmt ::= iff parentesisfirst Expr parentesissecond Stmt ElseBool 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("IfStmt",26, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Stmt",25, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Stmt",25, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Stmt",25, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Stmt",25, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Stmt",25, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Stmt",25, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Stmt",25, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Stmt ::= dotcomma 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Stmt",25, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Stmt ::= Expr dotcomma 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Stmt",25, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // StmtAst ::= Stmt StmtAst 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("StmtAst",24, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // StmtAst ::= 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("StmtAst",24, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VariableDeclAst ::= VariableDeclAst VariableDecl 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("VariableDeclAst",23, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VariableDeclAst ::= 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("VariableDeclAst",23, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StmtBlock ::= bracketfirst VariableDeclAst StmtAst bracketsecond 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("StmtBlock",12, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PrototypeAux ::= Identifierr parentesis dotcomma 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("PrototypeAux",41, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PrototypeAux ::= Identifierr parentesisfirst Formals parentesissecond dotcomma 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("PrototypeAux",41, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Prototype ::= voidd PrototypeAux 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Prototype",22, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Prototype ::= Type PrototypeAux 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Prototype",22, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PrototypeAst ::= PrototypeAst Prototype 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("PrototypeAst",21, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PrototypeAst ::= 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("PrototypeAst",21, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // InterfaceDecl ::= interfacee Identifierr bracketfirst PrototypeAst bracketsecond 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",8, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Field ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Field",20, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Field ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Field",20, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FieldAst ::= FieldAst Field 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("FieldAst",16, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FieldAst ::= 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("FieldAst",16, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IImplementAstAux ::= ImplementWithComma 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("IImplementAstAux",40, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IImplementAstAux ::= 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("IImplementAstAux",40, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ImplementWithComma ::= comma Identifierr IImplementAstAux 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("ImplementWithComma",18, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // implementssAst ::= Identifierr 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("implementssAst",17, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // implementssAst ::= Identifierr ImplementWithComma 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("implementssAst",17, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ImplementsBool ::= implementss implementssAst 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("ImplementsBool",15, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ImplementsBool ::= 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("ImplementsBool",15, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ExtendIdBool ::= extendss Identifierr 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("ExtendIdBool",14, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ExtendIdBool ::= 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("ExtendIdBool",14, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ClassDecl ::= classs Identifierr ExtendIdBool ImplementsBool bracketfirst FieldAst bracketsecond 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-5)).value;
		 Singleton.addClassOrInterfase(i.toString(), "class"); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("ClassDecl",7, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FormalsAux ::= FormalsWithComma 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("FormalsAux",39, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FormalsAux ::= 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("FormalsAux",39, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FormalsWithComma ::= comma Variable FormalsAux 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("FormalsWithComma",13, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Formals ::= Variable 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Formals",11, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Formals ::= Variable FormalsWithComma 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Formals",11, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Formals ::= 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Formals",11, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FunctionDecl ::= NT$8 voidd Identifierr parentesis StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-4)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		 
    Singleton.addSymbolTo_SymbolFunctionList(id, "void", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, "void "+ id); 
    Singleton.popEnvironmentQueue();

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("FunctionDecl",6, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$8 ::= 
            {
              Object RESULT =null;
Singleton.pushEnvironmentQueue(); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("NT$8",54, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FunctionDecl ::= NT$7 Type Identifierr parentesis StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-4)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		 
    Singleton.addSymbolTo_SymbolFunctionList(id, ty.toString(),((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1,  ty.toString() +" "+ id); 
    Singleton.popEnvironmentQueue();

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("FunctionDecl",6, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$7 ::= 
            {
              Object RESULT =null;
Singleton.pushEnvironmentQueue(); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("NT$7",53, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FunctionDecl ::= voidd Identifierr parentesisfirst NT$5 Formals NT$6 parentesissecond StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-7)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-7)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)).value;
		   
    Singleton.addSymbolTo_SymbolFunctionList(id, "void", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1,  "void "+ id); 
    Singleton.popEnvironmentQueue();

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("FunctionDecl",6, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-4)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
 Singleton.isParameterEnvironment = false; 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("NT$6",52, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).value;
Singleton.pushEnvironmentQueue(); Singleton.isParameterEnvironment = true; 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("NT$5",51, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FunctionDecl ::= Type Identifierr parentesisfirst NT$3 Formals NT$4 parentesissecond StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-7)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-7)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)).value;
		 
    Singleton.addSymbolTo_SymbolFunctionList(id, ty.toString(), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1,  ty.toString() +" "+ id); 
    Singleton.popEnvironmentQueue();

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("FunctionDecl",6, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-4)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
 Singleton.isParameterEnvironment = false; 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("NT$4",50, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$3 ::= 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).value;
Singleton.pushEnvironmentQueue(); Singleton.isParameterEnvironment = true; 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("NT$3",49, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= Type clasps 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = t +"[]"; 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Type",0, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= Identifierr 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT  = i; 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Type",0, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= stringg 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT  = "string"; 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Type",0, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= booll 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = "bool"; 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Type",0, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= doublee 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT  = "double"; 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Type",0, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= intt 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		 RESULT = "int"; 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Type",0, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Variable ::= constt Type Identifierr 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		
      Singleton.addSymbolTo_SymbolList(i, t, null, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, t +" "+ i);

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Variable",9, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Variable ::= Type Identifierr 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
		
      Singleton.addSymbolTo_SymbolList(i, t, null, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, t +" "+ i);

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Variable",9, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VariableDecl ::= Variable dotcomma 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("VariableDecl",5, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DeclPlusBool ::= DeclPlus 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("DeclPlusBool",43, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DeclPlusBool ::= 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("DeclPlusBool",43, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DeclPlus ::= Decl DeclPlusBool 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("DeclPlus",42, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decl ::= error dotcomma 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Decl",4, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decl ::= error claspsecond 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Decl",4, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decl ::= NT$2 InterfaceDecl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).value;
		Singleton.popEnvironmentQueue(); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Decl",4, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;
 Singleton.pushEnvironmentQueue(); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("NT$2",48, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= NT$1 ClassDecl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).value;
		Singleton.popEnvironmentQueue(); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Decl",4, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =null;
 Singleton.pushEnvironmentQueue(); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("NT$1",47, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Decl",4, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Decl",4, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FileDeclaration ::= numerall includee smaller fileNamee NT$0 greater 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-2)).value;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("FileDeclaration",45, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.peek()).value;
 Singleton.AnalyzeOtherFile(f, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, "#include <"+f+">"); 
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("NT$0",46, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Includes ::= FileDeclaration Includes 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Includes",44, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Includes ::= 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Includes",44, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticRules$parser.done_parsing();
          return CUP$SyntacticRules$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Includes DeclPlus 
            {
              Object RESULT =null;

              CUP$SyntacticRules$result = parser.getSymbolFactory().newSymbol("Program",2, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.elementAt(CUP$SyntacticRules$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()), RESULT);
            }
          return CUP$SyntacticRules$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

