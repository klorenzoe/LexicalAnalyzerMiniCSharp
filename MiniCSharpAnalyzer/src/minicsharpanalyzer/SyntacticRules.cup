  
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
package minicsharpanalyzer;
import java_cup.runtime.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    public String report_error_result="";
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
       // StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                report_error_result += " in line "+(s.left+1) +" ";   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    report_error_result+=", column "+(s.right+1)+" ";
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           thissmethod the message that was passed into thissmethod. */
        report_error_result+=" message: "+message+"\n";
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        //System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in thisscase an integer value, are listed on
   the next line down. */
terminal String    Identifierr, DoubleConstant, StringConstant, voidd, classs, interfacee, nulll, thiss, extendss, implementss, forr, whilee, iff, elsee, returnn, breakk, neww, newarray, printt, readinteger, readline, mallocc, getBytee, setBytee, comma, parentesisfirst, parentesissecond, bracketfirst, bracketsecond, dotcomma, assignment, plus, minus, times, div, percentage, smaller, smallerEquals, greater, greaterEquals, equals, notequals, and, or, not, parentesis, point, claspfirst, claspsecond, clasps, intt, doublee, booll, stringg, brackets, notfound;
terminal Integer   IntegerConstant;
terminal Boolen    BoolConstant;
   
/* Non terminals used in the grammar section.  

   Non terminals that have an object value are listed first and then
   non terminals that have an integer value are listed.  An object
   value means that it can be any type, it isn't set to a specific
   type.  So it could be an Integer or a String or whatever. */
non terminal Object     InterfaceDecl, Program, Decl, DeclPlus, VariableDecl, Variable, FunctionDecl, Formals, VariablePlus, extendsident, implementsident, IdentifierPlus, ClassDecl, Field, FieldAst, Prototype, StmtBlock, VariableDeclAst, Stmt, StmtAst, ExprBool, elseStmt, IfStmt, ExprPlus, WhileStmt, ForStmt, ReturnStmt, BreakStmt, PrintStmt, Expr, LValue, Call, LibCall, Actuals, Constant, exprPossibilities, DeclPlusBool, IdentifierPlusBool, VariablePlusBool, ExprPlusBool, IdentifierBool, RemoveRecursion, VariableCommaPlus;
non terminal String     Type;
   

/* -------------Precedence and Associatively of Terminals Section----------- */
   
/*
  Precedence of non terminals could be defined here.  If you do define
  precedence here you won't need to worry about precedence in the
  Grammar Section, i.e. that TIMES should have a higher precedence
  than PLUS.
  
  The precedence defined here would look something like thisswhere the
  lower line always will have higher precedence than the line before it. */
   
  precedence left iff, elsee, forr, whilee; 
  precedence left breakk, returnn;  
  precedence left parentesisfirst,  parentesissecond, claspfirst, claspsecond, bracketfirst, bracketsecond, parentesis, clasps, brackets;
  precedence left not, and, or, smaller, smallerEquals, greater, greaterEquals, equals, notequals, times, div, percentage, plus, minus;
  precedence left Identifierr, BoolConstant, IntegerConstant, DoubleConstant, StringConstant, thiss, neww, newarray,  nulll;  
  precedence left point, comma, dotcomma; 
  precedence left getBytee, setBytee, readinteger, readline,  mallocc;
  precedence left voidd, classs, interfacee, extendss, implementss,  printt, assignment;
  precedence left booll, intt, doublee, stringg;
  // bracketsecond, dotcomma, assignment,, , , , , smaller, smallerEquals, greater, greaterEquals, equals, notequals, and, or, not, parentesis, point, claspfirst, claspsecond;

/* ----------------------------Grammar Section-------------------- */
   
Program::= DeclPlus;

Decl::=   VariableDecl
        | FunctionDecl
        | ClassDecl
        | InterfaceDecl;

DeclPlus::= Decl DeclPlusBool;

DeclPlusBool::= |DeclPlus;

VariableDecl::= Variable dotcomma;

Variable::= Type Identifierr;

Type::= intt|doublee|booll|stringg| Identifierr | Type clasps;

FunctionDecl::= Type Identifierr parentesisfirst Formals parentesissecond StmtBlock
                | voidd Identifierr parentesisfirst Formals parentesissecond StmtBlock;

Formals::=   | VariableCommaPlus;

VariableCommaPlus::= Variable
                | Variable comma VariableCommaPlus;

VariablePlusBool::= | Variable;

extendsident::= | extendss Identifierr;

implementsident::=  | implementss IdentifierPlus comma; 

IdentifierPlus::= Identifierr IdentifierPlusBool;

IdentifierPlusBool::= |IdentifierPlus;

ClassDecl::= classs Identifierr extendsident implementsident bracketfirst FieldAst bracketsecond;

Field::= VariableDecl 
        | FunctionDecl;

FieldAst::=  | Field
            | FieldAst Field;

InterfaceDecl::= interfacee Identifierr bracketfirst Prototype bracketsecond;

Prototype::=| Type Identifierr parentesisfirst Formals parentesissecond dotcomma Prototype
            | voidd Identifierr parentesisfirst Formals parentesissecond dotcomma Prototype;

StmtBlock::= bracketfirst VariableDeclAst StmtAst bracketsecond;

VariableDeclAst::= |VariableDecl VariableDeclAst;

Stmt::= Expr dotcomma | dotcomma  | IfStmt | WhileStmt | ForStmt | BreakStmt | ReturnStmt | PrintStmt  | StmtBlock ;

StmtAst::= |Stmt StmtAst;

ExprBool::= |Expr;

elseStmt::= |elsee Stmt;

IfStmt ::= iff parentesisfirst Expr parentesissecond elseStmt;

ExprPlus::= Expr ExprPlusBool;

ExprPlusBool::= |ExprPlus;
WhileStmt::= whilee parentesisfirst Expr parentesissecond Stmt;

ForStmt::= forr parentesisfirst ExprBool dotcomma Expr dotcomma ExprBool parentesissecond Stmt;

ReturnStmt::= returnn ExprBool;

BreakStmt::= breakk dotcomma;

PrintStmt::= printt parentesisfirst ExprPlus comma parentesissecond dotcomma;      

Expr::= LValue assignment Expr RemoveRecursion | Constant RemoveRecursion | LValue RemoveRecursion |
        thiss RemoveRecursion | Call RemoveRecursion | parentesisfirst Expr parentesissecond | not Expr RemoveRecursion |
        neww parentesisfirst Identifierr parentesissecond RemoveRecursion | newarray parentesisfirst Expr comma Type parentesissecond  RemoveRecursion  |  readinteger parentesis RemoveRecursion |
        readline parentesis RemoveRecursion | mallocc parentesisfirst Expr parentesissecond RemoveRecursion;

RemoveRecursion::=  | exprPossibilities RemoveRecursion | minus Expr RemoveRecursion;

exprPossibilities::= plus Expr
                    | times Expr
                    | div Expr
                    | percentage Expr
                    | smaller Expr
                    | smallerEquals Expr
                    | greater Expr
                    | greaterEquals Expr
                    | equals Expr
                    | notequals Expr
                    | and Expr
                    | or Expr;

LValue::= Identifierr | Expr point Identifierr | Expr claspfirst Expr claspsecond;

Call::= Identifierr parentesisfirst Actuals parentesissecond | Expr point Identifierr parentesisfirst Actuals parentesissecond;

LibCall::= getBytee parentesisfirst Expr parentesissecond  | setBytee parentesisfirst Expr comma Expr parentesissecond;

Actuals::= | ExprPlus comma;

Constant::= IntegerConstant | DoubleConstant | BoolConstant | StringConstant | nulll;