  
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
package minicsharpanalyzer;
import java.util.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;


/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    public String report_error_result="";
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
       // StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            report_error_result+="val: "+s.value+" "; 
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                report_error_result += " in line "+(s.left+1) +" ";   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    report_error_result+=", column "+(s.right+1)+" ";
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           thissmethod the message that was passed into thissmethod. */
        report_error_result+=" message: "+message+"\n";

   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        //System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }
:};

/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in thisscase an integer value, are listed on
   the next line down. */
terminal String    Identifierr, DoubleConstant, StringConstant, voidd, classs, interfacee, nulll, thiss, extendss, implementss, forr, whilee, iff, elsee, returnn, breakk, neww, newarray, printt, readinteger, readline, mallocc, getBytee, setBytee, comma, parentesisfirst, parentesissecond, bracketfirst, bracketsecond, dotcomma, assignment, plus, minus, times, div, percentage, smaller, smallerEquals, greater, greaterEquals, equals, notequals, and, or, not, parentesis, point, claspfirst, claspsecond, clasps, intt, doublee, booll, stringg, brackets, notfound;
terminal String   IntegerConstant;
terminal String    BoolConstant;
terminal String    includee, numerall, fileNamee, constt;
   
/* Non terminals used in the grammar section.  

   Non terminals that have an object value are listed first and then
   non terminals that have an integer value are listed.  An object
   value means that it can be any type, it isn't set to a specific
   type.  So it could be an Integer or a String or whatever. */

non terminal String Type, Expr;
non terminal Object Program, DeclAst, Decl, VariableDecl, FunctionDecl, ClassDecl, InterfaceDecl;
non terminal Object Variable, FunctionRightRecursive, Formals, StmtBlock, FormalsWithComma;
non terminal Object ExtendIdBool, ImplementsBool, FieldAst, implementssAst, ImplementWithComma, ExprBool;
non terminal Object Field, PrototypeAst, Prototype,  VariableDeclAst, StmtAst, Stmt, IfStmt,WhileStmt;
non terminal Object ForStmt, BreakStmt, ReturnStmt, PrintStmt, ElseBool, ExprCommaPlus, LValue, Call;
non terminal Object LibCall, Actuals, Constant;
non terminal Object FormalsAux, IImplementAstAux, PrototypeAux;
non terminal Object DeclPlus, DeclPlusBool;
non terminal Object Includes, FileDeclaration;
/* -------------Precedence and Associatively of Terminals Section----------- */
   
/*
  Precedence of non terminals could be defined here.  If you do define
  precedence here you won't need to worry about precedence in the
  Grammar Section, i.e. that TIMES should have a higher precedence
  than PLUS.
  
  The precedence defined here would look something like thisswhere the
  lower line always will have higher precedence than the line before it. */

  
    precedence left assignment;
  precedence left plus, minus, times, div, percentage;
  precedence left smaller, smallerEquals, greater, greaterEquals, equals, notequals, and, or, not;
  precedence left voidd, classs , interfacee;
  precedence left intt, stringg, Identifierr, booll, doublee;
  precedence left elsee;



  // bracketsecond, dotcomma, assignment,, , , , , smaller, smallerEquals, greater, greaterEquals, equals, notequals, and, or, not, parentesis, point, claspfirst, claspsecond;

/* ----------------------------Grammar Section-------------------- */
   
Program::= Includes DeclPlus;

Includes::= | FileDeclaration Includes;
            
FileDeclaration::= numerall includee smaller fileNamee:f {: Singleton.AnalyzeOtherFile(f, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, "#include <"+f+">"); :}  greater;

Decl::=  VariableDecl
        |  FunctionDecl
        | {: Singleton.pushEnvironmentQueue(); :} ClassDecl {:Singleton.popEnvironmentQueue(); :}
        | {: Singleton.pushEnvironmentQueue(); :}  InterfaceDecl {:Singleton.popEnvironmentQueue(); :}
        | error claspsecond
        | error dotcomma;

DeclPlus::= Decl DeclPlusBool;

DeclPlusBool::= |DeclPlus;


VariableDecl ::= Variable dotcomma ;

Variable ::= Type:t Identifierr:i
{:
      Singleton.addSymbolTo_SymbolList(i, t, null, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, t +" "+ i);
:}
| constt Type:t Identifierr:i
{:
      Singleton.addSymbolTo_SymbolList(i, t, null, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, t +" "+ i);
:}
;

Type ::= intt:i {: RESULT = "int"; :}
        | doublee:d {: RESULT  = "double"; :}
        | booll:b {: RESULT = "bool"; :}
        | stringg:s {: RESULT  = "string"; :}
        | Identifierr:i {: RESULT  = i; :}
        | Type:t clasps:c {: RESULT = t +"[]"; :}
        ; 
        
        //| Type claspfirst claspsecond ;



FunctionDecl ::= 
Type:ty Identifierr:id parentesisfirst {:Singleton.pushEnvironmentQueue(); Singleton.isParameterEnvironment = true; :} Formals:f {: Singleton.isParameterEnvironment = false; :} parentesissecond StmtBlock
{: 
    Singleton.addSymbolTo_SymbolFunctionList(id, ty.toString(), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1,  ty.toString() +" "+ id); 
    Singleton.popEnvironmentQueue();
:}
| voidd:ty Identifierr:id parentesisfirst  {:Singleton.pushEnvironmentQueue(); Singleton.isParameterEnvironment = true; :} Formals:f {: Singleton.isParameterEnvironment = false; :} parentesissecond StmtBlock  
{:   
    Singleton.addSymbolTo_SymbolFunctionList(id, "void", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1,  "void "+ id); 
    Singleton.popEnvironmentQueue();
:}
|  {:Singleton.pushEnvironmentQueue(); :} Type:ty Identifierr:id parentesis StmtBlock 
{: 
    Singleton.addSymbolTo_SymbolFunctionList(id, ty.toString(),((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1,  ty.toString() +" "+ id); 
    Singleton.popEnvironmentQueue();
:}
|  {:Singleton.pushEnvironmentQueue(); :} voidd:ty Identifierr:id parentesis StmtBlock 
{: 
    Singleton.addSymbolTo_SymbolFunctionList(id, "void", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, "void "+ id); 
    Singleton.popEnvironmentQueue();
:};

Formals::= 
| Variable FormalsWithComma 
| Variable;

FormalsWithComma ::= comma Variable FormalsAux;

FormalsAux::= | FormalsWithComma;

ClassDecl ::= 
classs Identifierr:i ExtendIdBool ImplementsBool bracketfirst  FieldAst bracketsecond 
{: Singleton.addClassOrInterfase(i.toString(), "class"); :};

ExtendIdBool ::= | extendss Identifierr ;

ImplementsBool ::= | implementss implementssAst;

implementssAst ::= Identifierr ImplementWithComma | Identifierr;
ImplementWithComma ::= comma Identifierr IImplementAstAux;
IImplementAstAux::= | ImplementWithComma;

FieldAst ::= | FieldAst Field;

Field ::= VariableDecl
| FunctionDecl ;

InterfaceDecl::= interfacee Identifierr bracketfirst PrototypeAst bracketsecond;

PrototypeAst ::= | PrototypeAst Prototype;

Prototype ::= Type PrototypeAux
            | voidd PrototypeAux;

PrototypeAux::= Identifierr parentesisfirst Formals parentesissecond dotcomma 
                | Identifierr parentesis dotcomma;

StmtBlock ::= bracketfirst VariableDeclAst StmtAst bracketsecond ;

VariableDeclAst ::= | VariableDeclAst VariableDecl;

StmtAst ::=  | Stmt StmtAst;

Stmt ::= Expr dotcomma
        | dotcomma
        | IfStmt
        | WhileStmt
        | ForStmt
        | BreakStmt
        | ReturnStmt
        | PrintStmt
        | StmtBlock ;

IfStmt ::= iff parentesisfirst Expr parentesissecond Stmt ElseBool ;

ElseBool ::= | elsee Stmt;

WhileStmt ::= whilee parentesisfirst Expr parentesissecond Stmt ;

ForStmt ::= forr parentesisfirst ExprBool dotcomma Expr dotcomma ExprBool parentesissecond Stmt ;

ExprBool::= | Expr;

ReturnStmt ::= returnn ExprBool dotcomma ;

BreakStmt ::= breakk dotcomma ;

PrintStmt ::= printt parentesisfirst ExprCommaPlus parentesissecond dotcomma ;

ExprCommaPlus ::= Expr | ExprCommaPlus comma Expr;

Expr ::= 
parentesisfirst Expr parentesissecond 
| Expr:e1 plus Expr:e2 {: RESULT = Singleton.OperateValues(e1, e2, "+", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" + "+e2.split("!")[0]); :}
| Expr:e1 minus Expr:e2 {: RESULT = Singleton.OperateValues(e1, e2, "-", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" - "+e2.split("!")[0]); :}
| Expr:e1 times Expr:e2 {: RESULT = Singleton.OperateValues(e1, e2, "*", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" * "+e2.split("!")[0]); :}
| Expr:e1 div Expr:e2 {: RESULT = Singleton.OperateValues(e1, e2, "/", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" / "+e2.split("!")[0]); :}
| Expr:e1 percentage Expr:e2 {: RESULT = Singleton.OperateValues(e1, e2, "%", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" % "+e2.split("!")[0]); :}
| minus Expr:e1 {: RESULT = Singleton.OperateUnaryOperators(e1, "-", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, "-"+e1.split("!")[0]); :}
| Expr:e1 smaller Expr:e2 {: RESULT = Singleton.OperateValues(e1, e2, "<", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" < "+e2.split("!")[0]); :}
| Expr:e1 smallerEquals Expr:e2 {: RESULT = Singleton.OperateValues(e1, e2, "<=", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" <= "+e2.split("!")[0]); :}
| Expr:e1 greater Expr:e2 {: RESULT = Singleton.OperateValues(e1, e2, ">",((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" > "+e2.split("!")[0]); :}
| Expr:e1 greaterEquals Expr:e2 {: RESULT = Singleton.OperateValues(e1, e2, ">=", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" >= "+e2.split("!")[0]);:}
| Expr:e1 equals Expr:e2 {: RESULT = Singleton.OperateValues(e1, e2, "==", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" == "+e2.split("!")[0]); :}
| Expr:e1 notequals Expr:e2 {: RESULT = Singleton.OperateValues(e1, e2, "!=", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" != "+e2.split("!")[0]); :}
| Expr:e1 and Expr:e2 {: RESULT = Singleton.OperateValues(e1, e2, "&&", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" && "+e2.split("!")[0]); :}
| Expr:e1 or Expr:e2 {: RESULT = Singleton.OperateValues(e1, e2, "||", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, e1.split("!")[0]+" || "+e2.split("!")[0]); :}
| not Expr:e1 {: RESULT = Singleton.OperateUnaryOperators(e1, "!", ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, "!"+e1.split("!")[0]); :}
| neww parentesisfirst Identifierr parentesissecond
| newarray parentesisfirst Expr comma Type parentesissecond
| readinteger parentesis | readinteger parentesisfirst parentesissecond
| readline parentesis | readline parentesisfirst parentesissecond
| mallocc parentesisfirst Expr parentesissecond
| Constant:c {: RESULT = c.toString(); :}
| Call:c
| LValue:v {: RESULT = v.toString(); :}
| thiss:t {: RESULT = "this"; :}
|LValue:val assignment Expr:e {: RESULT = Singleton.modifyValueToSymbol(val.toString(), e.toString(), ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).right + 1, ((java_cup.runtime.Symbol)CUP$SyntacticRules$stack.peek()).left + 1, val.toString().split("!")[0]+" = "+ e.toString().split("!")[0]); :};


LValue ::= Identifierr:i {: RESULT = i+"!var"; :}
| Expr point Identifierr:i {: RESULT = i+"!var"; :} ; //----------------------------------------------------------------
//| Expr parentesisfirst Expr parentesissecond;

//Expr point Identifier ( Expr )


Call ::= Identifierr parentesisfirst Actuals parentesissecond 
| Expr point Identifierr parentesisfirst Actuals parentesissecond 
| Expr point LibCall parentesisfirst Actuals parentesissecond  ;

LibCall ::= getBytee parentesisfirst Expr parentesissecond 
| setBytee parentesisfirst Expr comma Expr parentesissecond ;

Actuals ::= | ExprCommaPlus;

Constant ::= IntegerConstant:i {: RESULT = i.toString()+"!int"; :}
| DoubleConstant:d {: RESULT = d+"!double"; :}
| BoolConstant:b {: RESULT = b+"!bool"; :}
| StringConstant:s {: RESULT = s+"!string"; :}
| nulll {: RESULT = "null!comodin"; :};